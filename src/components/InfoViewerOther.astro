<info-viewer-other class="is-block block">
  <p class="title is-4">Other</p>

  <table class="table is-striped is-hoverable is-size-6h">
    <tbody>
      <tr>
        <th>Model</th>
        <td data-label="model"></td>
      </tr>
      <tr>
        <th>Steps</th>
        <td data-label="steps"></td>
      </tr>
      <tr>
        <th>Sampler</th>
        <td data-label="sampler"></td>
      </tr>
      <tr>
        <th>Schedule type</th>
        <td data-label="schedule-type"></td>
      </tr>
      <tr>
        <th>Size</th>
        <td data-label="size"></td>
      </tr>
      <tr>
        <th>CFG scale</th>
        <td data-label="cfg-scale"></td>
      </tr>
      <tr>
        <th>Seed</th>
        <td data-label="seed"></td>
      </tr>
      <tr>
        <th>Clip skip</th>
        <td data-label="clip-skip"></td>
      </tr>
    </tbody>
  </table>
</info-viewer-other>

<script>
  import type { ReadImageInfoEventDetail } from "@scripts/global";
  import type { SdParameters } from "@scripts/rust-synced-types";

  export class InfoViewerOther extends HTMLElement {
    modelEl!: HTMLElement;
    stepsEl!: HTMLElement;
    samplerEl!: HTMLElement;
    scheduleTypeEl!: HTMLElement;
    sizeEl!: HTMLElement;
    cfgScaleEl!: HTMLElement;
    seedEl!: HTMLElement;
    clipSkipEl!: HTMLElement;

    connectedCallback() {
      this.modelEl = this.querySelector('[data-label="model"]')!;
      this.stepsEl = this.querySelector('[data-label="steps"]')!;
      this.samplerEl = this.querySelector('[data-label="sampler"]')!;
      this.scheduleTypeEl = this.querySelector('[data-label="schedule-type"]')!;
      this.sizeEl = this.querySelector('[data-label="size"]')!;
      this.cfgScaleEl = this.querySelector('[data-label="cfg-scale"]')!;
      this.seedEl = this.querySelector('[data-label="seed"]')!;
      this.clipSkipEl = this.querySelector('[data-label="clip-skip"]')!;

      document.addEventListener("read-image-info", this.handleReadImageInfo);
    }

    private handleReadImageInfo = (
      event: CustomEvent<ReadImageInfoEventDetail>
    ) => {
      const sdParameters = event.detail.png_info.sd_parameters;
      this.updateInfos(sdParameters);
    };

    updateInfos(sdParameters: SdParameters | null) {
      if (sdParameters === null) {
        this.modelEl.textContent = "N/A";
        this.stepsEl.textContent = "N/A";
        this.samplerEl.textContent = "N/A";
        this.scheduleTypeEl.textContent = "N/A";
        this.sizeEl.textContent = "N/A";
        this.cfgScaleEl.textContent = "N/A";
        this.seedEl.textContent = "N/A";
        this.clipSkipEl.textContent = "N/A";
        return;
      }

      const {
        model,
        steps,
        sampler,
        schedule_type,
        size,
        cfg_scale,
        seed,
        clip_skip,
      } = sdParameters;

      this.setText(this.modelEl, model ?? "N/A");
      this.setText(this.stepsEl, steps ?? "N/A");
      this.setText(this.samplerEl, sampler ?? "N/A");
      this.setText(this.scheduleTypeEl, schedule_type ?? "N/A");
      this.setText(this.sizeEl, size ?? "N/A");
      this.setText(this.cfgScaleEl, cfg_scale ?? "N/A");
      this.setText(this.seedEl, seed ?? "N/A");
      this.setText(this.clipSkipEl, clip_skip ?? "N/A");
    }

    private setText(el: HTMLElement, text: string) {
      el.textContent = text;
      el.title = text;
    }
  }
  customElements.define("info-viewer-other", InfoViewerOther);
</script>
