---
import InfoViewerBasic from "./InfoViewerBasic.astro";
import InfoViewerPrompt from "./InfoViewerPrompt.astro";
import InfoViewerOther from "./InfoViewerOther.astro";
import InfoViewerRaw from "./InfoViewerRaw.astro";
---

<info-viewer class="is-block p-4">
  <InfoViewerBasic />
  <InfoViewerPrompt promptType="positive" />
  <InfoViewerPrompt promptType="negative" />
  <InfoViewerOther />
  <InfoViewerRaw />

  <button id="test-copy-button" class="block button is-primary"
    >Copy to clipboard❗️</button
  >
  <button id="test-write-button" class="block button is-info"
    >Write rating❗️</button
  >
  <button id="test-read-button" class="block button is-warning"
    >Read from Rust</button
  >
</info-viewer>

<style is:global>
  /* Set `*` for increasing CSS specificity. */
  info-viewer * {
    --bulma-block-spacing: 1rem;
    --bulma-table-cell-padding: 0.1rem 0.3rem;
  }

  info-viewer .table {
    table-layout: fixed;
    width: 100%;
    word-break: break-all;
  }

  info-viewer .table th {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    width: 30%;
  }
</style>

<script src="@scripts/info-viewer.ts"></script>

<script>
  import { path } from "@tauri-apps/api";
  import { invoke } from "@tauri-apps/api/core";

  const copyButtonEl =
    document.querySelector<HTMLButtonElement>("#test-copy-button")!;

  copyButtonEl.addEventListener("click", async () => {
    const filesInDownloads = ["hoge.png", "fuga.png"] as const;
    const downloadDir = await path.downloadDir();
    const fullPaths = await Promise.all(
      filesInDownloads.map((p) => path.join(downloadDir, p))
    );

    console.log({ fullPaths });
    const result = await invoke("set_clipboard_files", {
      paths: fullPaths,
    });
    console.log({ "set_clipboard_files result": result });
  });

  const writeButtonEl =
    document.querySelector<HTMLButtonElement>("#test-write-button")!;
  writeButtonEl.addEventListener("click", async () => {
    try {
      const result2 = await invoke("write_exif_image_rating", {
        path: "/Users/tenpamk2/hoge/1.png",
        rating: 1,
      });
      console.log({ "write_exif_image_rating result": result2 });
    } catch (error) {
      console.error("write_exif_image_rating error:", error);
    }
  });

  const readButtonEl =
    document.querySelector<HTMLButtonElement>("#test-read-button")!;
  readButtonEl.addEventListener("click", async () => {
    try {
      const result = await invoke("read_comprehensive_image_info", {
        path: "/Users/tenpamk2/hoge/1.png",
      });
      console.log({ "read_comprehensive_image_info result": result });
    } catch (error) {
      console.error("read_comprehensive_image_info error:", error);
    }
  });
</script>
