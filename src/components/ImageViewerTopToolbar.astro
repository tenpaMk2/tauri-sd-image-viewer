---
import { Icon } from "astro-icon/components";
---

<!-- 上部ツールバー -->
<div
  class="top-toolbar enable-pointer-events is-flex is-justify-content-center"
>
  <div class="level">
    <div class="level-item">
      <div class="buttons has-text-white">
        <open-browser-button class="button is-rounded" title="ブラウザーを開く">
          <span class="icon">
            <Icon name="mage:dashboard" size="1.25em" />
          </span>
        </open-browser-button>
        <open-image-button class="button is-rounded" title="画像を開く">
          <span class="icon">
            <Icon name="mage:image" size="1.25em" />
          </span>
        </open-image-button>
        <open-directories-button
          class="button is-rounded"
          title="ディレクトリーを開く"
        >
          <span class="icon">
            <Icon name="mage:folder" size="1.25em" />
          </span>
        </open-directories-button>
        <copy-to-clipboard-button
          class="button is-rounded"
          title="画像をクリップボードへコピー"
        >
          <span class="icon">
            <Icon name="mage:clipboard-2" size="1.25em" data-state="idle" />
            <Icon
              name="mage:check-circle"
              size="1.25em"
              data-state="success"
              class="is-hidden"
            />
            <Icon
              name="mage:exclamation-circle"
              size="1.25em"
              data-state="error"
              class="is-hidden"
            />
          </span>
        </copy-to-clipboard-button>
        <auto-reload-latest-image-button
          class="button is-rounded"
          title="最新画像を自動リロード"
        >
          <span class="icon">
            <Icon name="mage:arrow-up-right-circle" size="1.25em" />
          </span>
        </auto-reload-latest-image-button>
      </div>
    </div>
  </div>
</div>

<style>
  .top-toolbar {
    height: var(--toolbar-height);
    background: var(--toolbar-background-color);
  }
</style>

<script>
  import "@scripts/global";

  class OpenBrowserButton extends HTMLElement {
    private handleClick = () => {
      document.dispatchEvent(new CustomEvent("open-browser-from-viewer", {}));
    };

    connectedCallback() {
      this.addEventListener("click", this.handleClick);
    }
  }
  customElements.define("open-browser-button", OpenBrowserButton);

  class OpenImageButton extends HTMLElement {
    private handleClick = () => {
      document.dispatchEvent(new CustomEvent("open-image-selector-dialog", {}));
    };

    connectedCallback() {
      this.addEventListener("click", this.handleClick);
    }
  }
  customElements.define("open-image-button", OpenImageButton);

  class OpenDirectoriesButton extends HTMLElement {
    private handleClick = () => {
      document.dispatchEvent(
        new CustomEvent("open-directories-selector-dialog", {})
      );
    };

    connectedCallback() {
      this.addEventListener("click", this.handleClick);
    }
  }
  customElements.define("open-directories-button", OpenDirectoriesButton);

  class CopyToClipboardButton extends HTMLElement {
    readonly POPUP_DURATION = 1000; // ms

    private handleClick = () => {
      // コピー処理開始の視覚的フィードバック
      this.showCopyingFeedback();

      // ImageViewerにクリップボードコピーを依頼
      document.dispatchEvent(new CustomEvent("copy-to-clipboard", {}));
    };

    private handleCopySuccess = (event: CustomEvent) => {
      console.log("Copy success:", event.detail);
      this.showCopySuccessFeedback();
    };

    private handleCopyFailed = (event: CustomEvent) => {
      console.error("Copy failed:", event.detail);
      this.showCopyFailedFeedback();
    };

    connectedCallback() {
      this.addEventListener("click", this.handleClick);

      // クリップボード関連のイベントをリッスンして視覚的フィードバック
      document.addEventListener(
        "clipboard-copy-success",
        this.handleCopySuccess
      );
      document.addEventListener("clipboard-copy-failed", this.handleCopyFailed);
    }

    disconnectedCallback() {
      document.removeEventListener(
        "clipboard-copy-success",
        this.handleCopySuccess
      );
      document.removeEventListener(
        "clipboard-copy-failed",
        this.handleCopyFailed
      );
    }

    private showCopyingFeedback() {
      this.setAttribute("title", "コピー中...");
      this.showIconState("loading");
    }

    private showCopySuccessFeedback() {
      this.setAttribute("title", "コピーしました！");
      this.showIconState("success");

      setTimeout(() => {
        this.setAttribute("title", "画像をクリップボードへコピー");
        this.showIconState("idle");
      }, 1500);
    }

    private showCopyFailedFeedback() {
      this.setAttribute("title", "コピーに失敗しました");
      this.showIconState("error");

      setTimeout(() => {
        this.setAttribute("title", "画像をクリップボードへコピー");
        this.showIconState("idle");
      }, this.POPUP_DURATION);
    }

    /**
     * 状態に応じてアイコンの表示を切り替える
     */
    private showIconState(state: "idle" | "loading" | "success" | "error") {
      // すべての状態クラスを削除
      this.classList.remove("is-loading", "is-success", "is-danger");

      // すべてのアイコンを一旦非表示
      const allIcons = this.querySelectorAll("[data-state]");
      allIcons.forEach((icon) => icon.classList.add("is-hidden"));

      switch (state) {
        case "loading":
          this.classList.add("is-loading");
          break;
        case "success":
          this.classList.add("is-success");
          this.querySelector('[data-state="success"]')?.classList.remove(
            "is-hidden"
          );
          break;
        case "error":
          this.classList.add("is-danger");
          this.querySelector('[data-state="error"]')?.classList.remove(
            "is-hidden"
          );
          break;
        case "idle":
          this.querySelector('[data-state="idle"]')?.classList.remove(
            "is-hidden"
          );
          break;
      }
    }
  }
  customElements.define("copy-to-clipboard-button", CopyToClipboardButton);

  class autoReloadLatestImageButton extends HTMLElement {
    private isActive = false;

    private handleClick = () => {
      if (this.isActive) {
        document.dispatchEvent(new CustomEvent("auto-reload-stop", {}));
      } else {
        document.dispatchEvent(new CustomEvent("auto-reload-start", {}));
      }
    };

    private handleStateChange = (event: CustomEvent<{ isActive: boolean }>) => {
      this.isActive = event.detail.isActive;
      this.updateAppearance(this.isActive);
    };

    connectedCallback() {
      this.addEventListener("click", this.handleClick);

      // 状態変更イベントをリッスンして見た目を更新
      document.addEventListener(
        "auto-reload-state-changed",
        this.handleStateChange
      );

      // 初期状態を問い合わせ
      document.dispatchEvent(new CustomEvent("request-auto-reload-state"));
    }

    disconnectedCallback() {
      document.removeEventListener(
        "auto-reload-state-changed",
        this.handleStateChange
      );
    }

    private updateAppearance(isActive: boolean) {
      if (isActive) {
        this.classList.add("is-primary");
        this.setAttribute("title", "自動リロードを停止");
      } else {
        this.classList.remove("is-primary");
        this.setAttribute("title", "最新画像を自動リロード");
      }
    }
  }
  customElements.define(
    "auto-reload-latest-image-button",
    autoReloadLatestImageButton
  );
</script>
