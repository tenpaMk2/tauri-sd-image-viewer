---
import { Icon } from "astro-icon/components";

type Props = {
  maxRating?: number;
};

const { maxRating = 5 } = Astro.props;
const ratings = Array.from({ length: maxRating }, (_, i) => i + 1);
---

<star-rating class="buttons has-addons is-small has-text-white m-0">
  {
    ratings.map((rating) => (
      <button
        class="button p-2"
        data-rating={rating}
        title={`Rating: ${rating}`}
      >
        <span class="icon">
          <span data-star="fill" class="is-hidden">
            <Icon name="mage:star-fill" size="1.0em" />
          </span>
          <span data-star="empty">
            <Icon name="mage:star" size="1.0em" />
          </span>
        </span>
      </button>
    ))
  }
</star-rating>

<script>
  import type { ReadImageInfoEventDetail } from "../scripts/global";

  export class StarRating extends HTMLElement {
    starElements!: Array<{ fill: Element; empty: Element }>;

    connectedCallback() {
      // 星要素を一度だけ取得してキャッシュ
      this.starElements = Array.from(
        this.querySelectorAll("button[data-rating]")
      ).map((button) => ({
        fill: button.querySelector('[data-star="fill"]')!,
        empty: button.querySelector('[data-star="empty"]')!,
      }));

      // ボタンクリックイベントを追加
      this.querySelectorAll("button[data-rating]").forEach((button) => {
        button.addEventListener("click", this.handleStarClick);
      });

      // 画像情報イベントをリッスンしてレーティングを取得
      document.addEventListener("read-image-info", this.handleReadImageInfo);
    }

    private handleStarClick = async (event: Event) => {
      const button = event.currentTarget as HTMLButtonElement;
      const rating = parseInt(button.dataset.rating || "0");

      // ImageViewerにrating書き込みを依頼（パスは不要）
      document.dispatchEvent(
        new CustomEvent("write-image-rating", {
          detail: { rating: rating },
        })
      );

      // 即座にUI更新（楽観的更新）
      // TODO: `image-rating-write-success` イベントなどに対応
      this.updateRatingDisplay(rating);
    };

    private handleReadImageInfo = (
      event: CustomEvent<ReadImageInfoEventDetail>
    ) => {
      // レーティング表示を更新
      const rating = event.detail.exif_info.rating;
      this.updateRatingDisplay(rating ?? 0);
    };

    private updateRatingDisplay(rating: number) {
      this.starElements.forEach((star, index) => {
        const buttonRating = index + 1;

        if (buttonRating <= rating) {
          // 塗りつぶしの星を表示、空の星を非表示
          star.fill.classList.remove("is-hidden");
          star.empty.classList.add("is-hidden");
        } else {
          // 空の星を表示、塗りつぶしの星を非表示
          star.fill.classList.add("is-hidden");
          star.empty.classList.remove("is-hidden");
        }
      });
    }
  }
  customElements.define("star-rating", StarRating);
</script>
