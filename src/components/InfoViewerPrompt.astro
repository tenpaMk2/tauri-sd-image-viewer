---
// TODO: プロンプトのコピーボタン。

type Props = {
  promptType?: "positive" | "negative";
};

const { promptType = "positive" } = Astro.props;
const title = promptType === "positive" ? "Positive prompt" : "Negative prompt";
---

<info-viewer-prompt
  class="is-block block is-clipped"
  data-prompt-type={promptType}
>
  <p class="title is-4">{title}</p>
  <div class="tags">
    <span class="tag is-skeleton">masterpiece</span>
    <span class="tag is-skeleton">1girl</span>
    <span class="tag is-skeleton">solo</span>
    <span class="tag is-skeleton">red eyes</span>
    <span class="tag is-skeleton">black hair</span>
    <span class="tag is-skeleton">long hair</span>
  </div>
</info-viewer-prompt>

<style is:global>
  info-viewer-prompt .tags > .tags {
    margin: 0;
  }
  info-viewer-prompt .tags > .tags > .tag:last-child {
    border-left: 2px dotted
      hsl(var(--bulma-tag-h) var(--bulma-tag-s) var(--bulma-tag-color-l) / 50%);
    font-weight: bold;
  }
  info-viewer-prompt .tags > .tag {
    padding-right: 0.3rem;
    padding-left: 0.3rem;
    font-size: 0.875rem;
  }

  info-viewer-prompt .tag::before {
    content: var(--icon-char, "");
  }
</style>

<style>
  info-viewer-prompt .tags {
    gap: 0.3rem;
  }
</style>

<script>
  import type { ReadImageInfoEventDetail } from "@scripts/global";
  import type { SdTag } from "@scripts/rust-synced-types";
  import type { SdTagCategory } from "@scripts/sd-tag-attributes";
  import { SD_TAG_ATTRIBUTES } from "@src-root/scripts/sd-tag-attributes";

  const TAG_ICONS = {
    "quality": "🖼️",
    "person-count": "🔢",
    "person-relations": "👥",
    "character-name": "📛",
    "series-name": "📚",
    "camera": "📷",
    "character": "🐰",
    "outfit": "👚",
    "pose": "✌️",
    "background": "🌄",
    "face": "😊",
    "effect": "🌟",
  } as const satisfies Record<SdTagCategory, string>;

  export class InfoViewerPrompt extends HTMLElement {
    containerEl!: HTMLElement;

    connectedCallback() {
      this.containerEl = this.querySelector("div")!;

      document.addEventListener("read-image-info", this.handleReadImageInfo);
    }

    private handleReadImageInfo = (
      event: CustomEvent<ReadImageInfoEventDetail>
    ) => {
      const sdParameters = event.detail.png_info.sd_parameters;
      const promptType = this.getAttribute("data-prompt-type");

      if (!sdParameters) {
        console.warn("No SD parameters found in the image info.");
        return;
      }

      if (promptType === "positive") {
        this.updateTags(sdParameters.positive_sd_tags ?? []);
      } else if (promptType === "negative") {
        this.updateTags(sdParameters.negative_sd_tags ?? []);
      }
    };

    updateTags(sdTags: SdTag[]) {
      this.containerEl.classList.remove("skeleton-block");

      const tagEls = sdTags.map((tag) => {
        const hasWeight = tag.weight !== null;

        if (hasWeight) {
          // Weight付きタグ：分割表示
          const tagDivEl = document.createElement("div");
          tagDivEl.classList.add("tags", "has-addons");

          const nameEl = document.createElement("span");
          nameEl.classList.add("tag");
          nameEl.textContent = tag.name;
          this.setTagIcon(nameEl, tag.name);

          const weightEl = document.createElement("span");
          weightEl.classList.add("tag");
          weightEl.textContent = tag.weight!.toString();

          tagDivEl.appendChild(nameEl);
          tagDivEl.appendChild(weightEl);
          return tagDivEl;
        } else {
          // 通常タグ：単一表示
          const tagEl = document.createElement("span");
          tagEl.classList.add("tag");
          tagEl.textContent = tag.name;
          this.setTagIcon(tagEl, tag.name);
          return tagEl;
        }
      });

      console.debug({ tagElsLength: tagEls.length });
      this.containerEl.replaceChildren(...tagEls);
    }

    private setTagIcon(element: HTMLElement, tagName: string): void {
      if (!SD_TAG_ATTRIBUTES[tagName]) return;
      const category = SD_TAG_ATTRIBUTES[tagName].category;
      const icon = TAG_ICONS[category];
      element.style.setProperty("--icon-char", `"${icon}"`);
    }
  }
  customElements.define("info-viewer-prompt", InfoViewerPrompt);
</script>
