---
import InfoViewer from "@src-root/components/InfoViewer.astro";
import SplitLayout from "@src-root/layouts/SplitLayout.astro";
---

<SplitLayout>
  <div class="is-flex is-flex-wrap-wrap has-background-info-50 p-2"></div>
  <InfoViewer slot="side-pain" />
</SplitLayout>

<style>
  div.is-flex {
    width: 100%;
    gap: 4px;
  }
</style>

<script>
  import { path } from "@tauri-apps/api";
  import { readDir, readFile } from "@tauri-apps/plugin-fs";

  const urlParams = new URLSearchParams(window.location.search);
  console.log({ "urlParams.get('dir')": urlParams.get("dir") });
  const TARGET_DIR = urlParams.get("dir") || (await path.downloadDir());

  const detectImageMineType = async (
    filename: string
  ): Promise<string | null> => {
    const ext = (await path.extname(filename)).toLowerCase();
    switch (ext) {
      case "jpg":
      case "jpeg":
        return "image/jpeg";
      case "png":
        return "image/png";
      case "webp":
        return "image/webp";
      case "gif":
        return "image/gif";
      default:
        return null;
    }
  };

  // 画像データからアスペクト比を取得する関数（最適化バージョン）
  const getImageDetails = (
    imageData: Uint8Array,
    mimeType: string
  ): Promise<{
    url: string;
    width: number;
    height: number;
  }> => {
    // asyncで囲わずに、直接Promiseを返す
    return new Promise((resolve, reject) => {
      const blob = new Blob([imageData], { type: mimeType });
      const url = URL.createObjectURL(blob);

      const img = new Image();
      img.onload = () => {
        const { width, height } = img;
        resolve({ url, width, height });
      };

      img.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error("画像の読み込みに失敗しました"));
      };

      img.src = url;
    });
  };

  const dirEntries = await readDir(TARGET_DIR);
  const imageEntries = dirEntries.filter(
    (entry) => entry.isFile && /\.(jpg|jpeg|png|webp|gif)$/i.test(entry.name)
  );

  const imageFullPaths = await Promise.all(
    imageEntries
      .map((entry) => entry.name)
      .map((filename) => path.join(TARGET_DIR, filename))
      .sort()
  );

  for (const imagePath of imageFullPaths) {
    const imgEl = document.createElement("img");
    const mimeType = (await detectImageMineType(imagePath)) ?? "image/png";

    const imageData = await readFile(imagePath);
    // 画像の詳細情報を取得
    const { url, width, height } = await getImageDetails(imageData, mimeType);

    imgEl.src = url;
    imgEl.width = width;
    imgEl.height = height;
    imgEl.loading = "lazy";

    const figureEl = document.createElement("figure");
    const divEl = document.createElement("div");

    const BASE_WIDTH_PX = 320;
    const MAX_HEIGHT_PX = 500;
    const flexBasisPx = Math.floor((width / height) * BASE_WIDTH_PX);
    const maxWidthPx = Math.floor((width / height) * MAX_HEIGHT_PX);

    divEl.classList.add("has-background-primary-15");
    divEl.style.flex = `1 1 ${flexBasisPx}px`;

    figureEl.style.width = "100%";
    figureEl.style.height = "100%";
    figureEl.style.display = "flex";
    figureEl.style.justifyContent = "center";
    figureEl.style.backgroundColor = "cyan";

    imgEl.style.width = "100%";
    imgEl.style.height = "100%";
    imgEl.style.objectFit = "cover";
    imgEl.style.maxWidth = `${maxWidthPx}px`;

    figureEl.appendChild(imgEl);
    divEl.appendChild(figureEl);
    document.querySelector("div.is-flex")!.appendChild(divEl);
  }
</script>
